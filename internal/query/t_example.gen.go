// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"KunLunQiLian/server-example/internal/model"
)

func newTExample(db *gorm.DB) tExample {
	_tExample := tExample{}

	_tExample.tExampleDo.UseDB(db)
	_tExample.tExampleDo.UseModel(&model.TExample{})

	tableName := _tExample.tExampleDo.TableName()
	_tExample.ALL = field.NewField(tableName, "*")
	_tExample.ID = field.NewInt32(tableName, "id")
	_tExample.Name = field.NewString(tableName, "name")
	_tExample.CarType = field.NewInt32(tableName, "car_type")

	_tExample.fillFieldMap()

	return _tExample
}

type tExample struct {
	tExampleDo tExampleDo

	ALL     field.Field
	ID      field.Int32
	Name    field.String
	CarType field.Int32

	fieldMap map[string]field.Expr
}

func (t tExample) Table(newTableName string) *tExample {
	t.tExampleDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tExample) As(alias string) *tExample {
	t.tExampleDo.DO = *(t.tExampleDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tExample) updateTableName(table string) *tExample {
	t.ALL = field.NewField(table, "*")
	t.ID = field.NewInt32(table, "id")
	t.Name = field.NewString(table, "name")
	t.CarType = field.NewInt32(table, "car_type")

	t.fillFieldMap()

	return t
}

func (t *tExample) WithContext(ctx context.Context) *tExampleDo { return t.tExampleDo.WithContext(ctx) }

func (t tExample) TableName() string { return t.tExampleDo.TableName() }

func (t tExample) Alias() string { return t.tExampleDo.Alias() }

func (t *tExample) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tExample) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 3)
	t.fieldMap["id"] = t.ID
	t.fieldMap["name"] = t.Name
	t.fieldMap["car_type"] = t.CarType
}

func (t tExample) clone(db *gorm.DB) tExample {
	t.tExampleDo.ReplaceDB(db)
	return t
}

type tExampleDo struct{ gen.DO }

func (t tExampleDo) Debug() *tExampleDo {
	return t.withDO(t.DO.Debug())
}

func (t tExampleDo) WithContext(ctx context.Context) *tExampleDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tExampleDo) ReadDB(ctx context.Context) *tExampleDo {
	return t.WithContext(ctx).Clauses(dbresolver.Read)
}

func (t tExampleDo) WriteDB(ctx context.Context) *tExampleDo {
	return t.WithContext(ctx).Clauses(dbresolver.Write)
}

func (t tExampleDo) Clauses(conds ...clause.Expression) *tExampleDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tExampleDo) Returning(value interface{}, columns ...string) *tExampleDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tExampleDo) Not(conds ...gen.Condition) *tExampleDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tExampleDo) Or(conds ...gen.Condition) *tExampleDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tExampleDo) Select(conds ...field.Expr) *tExampleDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tExampleDo) Where(conds ...gen.Condition) *tExampleDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tExampleDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tExampleDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tExampleDo) Order(conds ...field.Expr) *tExampleDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tExampleDo) Distinct(cols ...field.Expr) *tExampleDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tExampleDo) Omit(cols ...field.Expr) *tExampleDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tExampleDo) Join(table schema.Tabler, on ...field.Expr) *tExampleDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tExampleDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tExampleDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tExampleDo) RightJoin(table schema.Tabler, on ...field.Expr) *tExampleDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tExampleDo) Group(cols ...field.Expr) *tExampleDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tExampleDo) Having(conds ...gen.Condition) *tExampleDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tExampleDo) Limit(limit int) *tExampleDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tExampleDo) Offset(offset int) *tExampleDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tExampleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tExampleDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tExampleDo) Unscoped() *tExampleDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tExampleDo) Create(values ...*model.TExample) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tExampleDo) CreateInBatches(values []*model.TExample, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tExampleDo) Save(values ...*model.TExample) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tExampleDo) First() (*model.TExample, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TExample), nil
	}
}

func (t tExampleDo) Take() (*model.TExample, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TExample), nil
	}
}

func (t tExampleDo) Last() (*model.TExample, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TExample), nil
	}
}

func (t tExampleDo) Find() ([]*model.TExample, error) {
	result, err := t.DO.Find()
	return result.([]*model.TExample), err
}

func (t tExampleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TExample, err error) {
	buf := make([]*model.TExample, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tExampleDo) FindInBatches(result *[]*model.TExample, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tExampleDo) Attrs(attrs ...field.AssignExpr) *tExampleDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tExampleDo) Assign(attrs ...field.AssignExpr) *tExampleDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tExampleDo) Joins(fields ...field.RelationField) *tExampleDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tExampleDo) Preload(fields ...field.RelationField) *tExampleDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tExampleDo) FirstOrInit() (*model.TExample, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TExample), nil
	}
}

func (t tExampleDo) FirstOrCreate() (*model.TExample, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TExample), nil
	}
}

func (t tExampleDo) FindByPage(offset int, limit int) (result []*model.TExample, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tExampleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tExampleDo) withDO(do gen.Dao) *tExampleDo {
	t.DO = *do.(*gen.DO)
	return t
}
